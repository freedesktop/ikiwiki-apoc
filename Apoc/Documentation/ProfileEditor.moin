= The Profile Editor =

<<TableOfContents(2)>>

== Overview ==
The Profile Editor is a Java based UI application that allows you to create profiles for the templates packages available on the system. It uses the template packages to know about which applications and configuration keys are available.

== Configuring the Template Packages ==

To properly use the editor you need to have at least one template package installed on your system, each package contains the list of configuration keys and possible values for one application. The Profile Editor uses this keys to build the user interfaces that will allow the user to select values for each of those configuration keys. The first time you run the editor, it will try to find the template packages directory, if it's unable to find it on any of the default paths, it will prompt the user for it to import them properly.

{{attachment:package_directory.png}}

After importing the template packages, you will be able to select the list of applications available on the ''Configuration Settings'' tab.

== Creating a Profile ==

To create a profile click on the File->New menu entry, then, you should select a name for the new profile on the {{{General Properties}}} tab. If the template packages were loaded succesfully you should be able to see all the settings available on the {{{Configuration Settings}}} tab. Select the values for each setting that you want to include on the profile.

{{attachment:edit_settings.png}}

== Saving the Profile ==

Once you have selected all the configuration settings, you can proceed to save the profile, click on the File->Save menu entry, you will be prompted for the file name and the location of the profile.

{{attachment:saving_profile.png}}

This will create a .zip file containing the profile data.

== Applying the profile locally ==

On your client host, create the directory {{{${DataDir}/Policies/profiles/PROFILE_REPOSITORY_default}}}, if it does not already exist. {{{${DataDir} }}}corresponds to the value of the Desktop Agent's data directory which is {{{/usr/local/var/apoc}}} by default.

Copy the previously created zip file to {{{/usr/local/var/apoc/Policies/profiles/PROFILE_REPOSITORY_default}}}.

Ensure that the Configuration Agent is configured to apply available local policies. To do this, set the {{{ApplyLocalPolicy}}} variable to yes in the {{{${ConfigDir}apocd.properties}}} file. {{{${ConfigDir} }}}corresponds to the value of the Desktop Agent's configuration directory which is /usr/local/etc by default.

Now restart the Desktop Agent running:
{{{
$ /usr/local/lib/apoc/apocd restart
}}}

Any local policy deployed in this manner will be made available to clients during the next Configuration Agent change detection cycle.
